//! Definitions for `<c3d/texenv.h>`.
//! Most of these functions are `static inline` so they don't get generated by `bindgen`.

use core::ops::{BitOr, Shl};

use libc::c_int;

use super::*;

// TODO: why are these two different macros in C?

/// Creates a texture combiner source parameter from three sources.
fn gpu_tevsources<T>(a: T, b: T, c: T) -> T
where
    T: BitOr<Output = T> + Shl<u8, Output = T>,
{
    a | b << 4 | c << 8
}

/// Creates a texture combiner operand parameter from three operands.
fn gpu_tevoperands<T>(a: T, b: T, c: T) -> T
where
    T: BitOr<Output = T> + Shl<u8, Output = T>,
{
    a | b << 4 | c << 8
}

pub unsafe fn C3D_TexEnvInit(env: *mut C3D_TexEnv) {
    (*env).srcRgb = gpu_tevsources(GPU_PREVIOUS, 0, 0) as u16;
    (*env).srcAlpha = (*env).srcRgb;
    (*env).__bindgen_anon_1.opAll = 0;
    (*env).funcRgb = GPU_REPLACE as u16;
    (*env).funcAlpha = (*env).funcRgb;
    (*env).color = 0xFFFFFFFF;
    (*env).scaleRgb = GPU_TEVSCALE_1 as u16;
    (*env).scaleAlpha = GPU_TEVSCALE_1 as u16;
}

// TODO: maybe

pub unsafe fn C3D_TexEnvSrc(env: *mut C3D_TexEnv, mode: c_int, s1: c_int, s2: c_int, s3: c_int) {
    let param = gpu_tevsources(s1, s2, s3);

    if mode & C3D_RGB as i32 != 0 {
        (*env).srcRgb = param as u16;
    }

    if mode & C3D_Alpha as i32 != 0 {
        (*env).srcAlpha = param as u16;
    }
}

pub unsafe fn C3D_TexEnvOp(env: *mut C3D_TexEnv, mode: c_int, o1: c_int, o2: c_int, o3: c_int) {
    let param = gpu_tevoperands(o1, o2, o3);

    if mode & C3D_RGB as i32 != 0 {
        // (*env).opRgb = param as u16;
        (*env)
            .__bindgen_anon_1
            .__bindgen_anon_1
            .set_opRgb(param as u32);
    }

    if mode & C3D_Alpha as i32 != 0 {
        (*env)
            .__bindgen_anon_1
            .__bindgen_anon_1
            .set_opAlpha(param as u32);
    }
}

pub unsafe fn C3D_TexEnvFunc(env: *mut C3D_TexEnv, mode: c_int, param: c_int) {
    if mode & C3D_RGB as i32 != 0 {
        (*env).funcRgb = param as u16;
    }

    if mode & C3D_Alpha as i32 != 0 {
        (*env).funcAlpha = param as u16;
    }
}
